# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PromotionExecutableTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'executable': 'str',
        'keep_target_resources': 'bool',
        'advanced': 'AdvancedPromotionSpec'
    }

    attribute_map = {
        'executable': 'executable',
        'keep_target_resources': 'keepTargetResources',
        'advanced': 'advanced'
    }

    def __init__(self, executable=None, keep_target_resources=None, advanced=None):  # noqa: E501
        """PromotionExecutableTask - a model defined in Swagger"""  # noqa: E501

        self._executable = None
        self._keep_target_resources = None
        self._advanced = None
        self.discriminator = None

        self.executable = executable
        if keep_target_resources is not None:
            self.keep_target_resources = keep_target_resources
        if advanced is not None:
            self.advanced = advanced

    @property
    def executable(self):
        """Gets the executable of this PromotionExecutableTask.  # noqa: E501

        Executable identifier  # noqa: E501

        :return: The executable of this PromotionExecutableTask.  # noqa: E501
        :rtype: str
        """
        return self._executable

    @executable.setter
    def executable(self, executable):
        """Sets the executable of this PromotionExecutableTask.

        Executable identifier  # noqa: E501

        :param executable: The executable of this PromotionExecutableTask.  # noqa: E501
        :type: str
        """
        if executable is None:
            raise ValueError("Invalid value for `executable`, must not be `None`")  # noqa: E501

        self._executable = executable

    @property
    def keep_target_resources(self):
        """Gets the keep_target_resources of this PromotionExecutableTask.  # noqa: E501

        Keep Target Resources flag  # noqa: E501

        :return: The keep_target_resources of this PromotionExecutableTask.  # noqa: E501
        :rtype: bool
        """
        return self._keep_target_resources

    @keep_target_resources.setter
    def keep_target_resources(self, keep_target_resources):
        """Sets the keep_target_resources of this PromotionExecutableTask.

        Keep Target Resources flag  # noqa: E501

        :param keep_target_resources: The keep_target_resources of this PromotionExecutableTask.  # noqa: E501
        :type: bool
        """

        self._keep_target_resources = keep_target_resources

    @property
    def advanced(self):
        """Gets the advanced of this PromotionExecutableTask.  # noqa: E501

        Advanced Promotion specification  # noqa: E501

        :return: The advanced of this PromotionExecutableTask.  # noqa: E501
        :rtype: AdvancedPromotionSpec
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this PromotionExecutableTask.

        Advanced Promotion specification  # noqa: E501

        :param advanced: The advanced of this PromotionExecutableTask.  # noqa: E501
        :type: AdvancedPromotionSpec
        """

        self._advanced = advanced

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionExecutableTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionExecutableTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
