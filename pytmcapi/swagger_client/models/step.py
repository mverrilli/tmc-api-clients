# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Step(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'condition': 'str',
        'task_ids': 'list[str]',
        'handler_on_failure': 'StepErrorHandler'
    }

    attribute_map = {
        'name': 'name',
        'condition': 'condition',
        'task_ids': 'taskIds',
        'handler_on_failure': 'handlerOnFailure'
    }

    def __init__(self, name=None, condition=None, task_ids=None, handler_on_failure=None):  # noqa: E501
        """Step - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._condition = None
        self._task_ids = None
        self._handler_on_failure = None
        self.discriminator = None

        self.name = name
        self.condition = condition
        self.task_ids = task_ids
        if handler_on_failure is not None:
            self.handler_on_failure = handler_on_failure

    @property
    def name(self):
        """Gets the name of this Step.  # noqa: E501

        Step name  # noqa: E501

        :return: The name of this Step.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Step.

        Step name  # noqa: E501

        :param name: The name of this Step.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def condition(self):
        """Gets the condition of this Step.  # noqa: E501

        Expected status of successful step  # noqa: E501

        :return: The condition of this Step.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Step.

        Expected status of successful step  # noqa: E501

        :param condition: The condition of this Step.  # noqa: E501
        :type: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501
        allowed_values = ["ALL_SUCCEEDED", "AT_LEAST_ONE_SUCCEEDED"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def task_ids(self):
        """Gets the task_ids of this Step.  # noqa: E501

        List of step tasks  # noqa: E501

        :return: The task_ids of this Step.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids):
        """Sets the task_ids of this Step.

        List of step tasks  # noqa: E501

        :param task_ids: The task_ids of this Step.  # noqa: E501
        :type: list[str]
        """
        if task_ids is None:
            raise ValueError("Invalid value for `task_ids`, must not be `None`")  # noqa: E501

        self._task_ids = task_ids

    @property
    def handler_on_failure(self):
        """Gets the handler_on_failure of this Step.  # noqa: E501

        Handler of step errors  # noqa: E501

        :return: The handler_on_failure of this Step.  # noqa: E501
        :rtype: StepErrorHandler
        """
        return self._handler_on_failure

    @handler_on_failure.setter
    def handler_on_failure(self, handler_on_failure):
        """Sets the handler_on_failure of this Step.

        Handler of step errors  # noqa: E501

        :param handler_on_failure: The handler_on_failure of this Step.  # noqa: E501
        :type: StepErrorHandler
        """

        self._handler_on_failure = handler_on_failure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Step, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Step):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
