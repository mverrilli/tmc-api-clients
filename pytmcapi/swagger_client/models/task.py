# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'workspace': 'WorkspaceInfo',
        'version': 'str',
        'artifact': 'BaseArtifactVersion',
        'tags': 'list[str]',
        'connections': 'dict(str, str)',
        'parameters': 'dict(str, str)',
        'resources': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'workspace': 'workspace',
        'version': 'version',
        'artifact': 'artifact',
        'tags': 'tags',
        'connections': 'connections',
        'parameters': 'parameters',
        'resources': 'resources'
    }

    def __init__(self, id=None, name=None, description=None, workspace=None, version=None, artifact=None, tags=None, connections=None, parameters=None, resources=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._workspace = None
        self._version = None
        self._artifact = None
        self._tags = None
        self._connections = None
        self._parameters = None
        self._resources = None
        self.discriminator = None

        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if workspace is not None:
            self.workspace = workspace
        self.version = version
        self.artifact = artifact
        if tags is not None:
            self.tags = tags
        if connections is not None:
            self.connections = connections
        if parameters is not None:
            self.parameters = parameters
        if resources is not None:
            self.resources = resources

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        Id of task  # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        Id of task  # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501

        Name of task  # noqa: E501

        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        Name of task  # noqa: E501

        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501

        Task description  # noqa: E501

        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        Task description  # noqa: E501

        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workspace(self):
        """Gets the workspace of this Task.  # noqa: E501

        Task workspace  # noqa: E501

        :return: The workspace of this Task.  # noqa: E501
        :rtype: WorkspaceInfo
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this Task.

        Task workspace  # noqa: E501

        :param workspace: The workspace of this Task.  # noqa: E501
        :type: WorkspaceInfo
        """

        self._workspace = workspace

    @property
    def version(self):
        """Gets the version of this Task.  # noqa: E501

        Task version  # noqa: E501

        :return: The version of this Task.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Task.

        Task version  # noqa: E501

        :param version: The version of this Task.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def artifact(self):
        """Gets the artifact of this Task.  # noqa: E501

        Artifact used in task  # noqa: E501

        :return: The artifact of this Task.  # noqa: E501
        :rtype: BaseArtifactVersion
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this Task.

        Artifact used in task  # noqa: E501

        :param artifact: The artifact of this Task.  # noqa: E501
        :type: BaseArtifactVersion
        """
        if artifact is None:
            raise ValueError("Invalid value for `artifact`, must not be `None`")  # noqa: E501

        self._artifact = artifact

    @property
    def tags(self):
        """Gets the tags of this Task.  # noqa: E501

        Task tags  # noqa: E501

        :return: The tags of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Task.

        Task tags  # noqa: E501

        :param tags: The tags of this Task.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def connections(self):
        """Gets the connections of this Task.  # noqa: E501

        Task connections  # noqa: E501

        :return: The connections of this Task.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Task.

        Task connections  # noqa: E501

        :param connections: The connections of this Task.  # noqa: E501
        :type: dict(str, str)
        """

        self._connections = connections

    @property
    def parameters(self):
        """Gets the parameters of this Task.  # noqa: E501

        Task parameters  # noqa: E501

        :return: The parameters of this Task.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Task.

        Task parameters  # noqa: E501

        :param parameters: The parameters of this Task.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def resources(self):
        """Gets the resources of this Task.  # noqa: E501

        Task resources  # noqa: E501

        :return: The resources of this Task.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Task.

        Task resources  # noqa: E501

        :param resources: The resources of this Task.  # noqa: E501
        :type: dict(str, str)
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
