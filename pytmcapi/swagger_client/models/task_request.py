# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'environment_id': 'str',
        'workspace_id': 'str',
        'artifact': 'ArtifactRequest',
        'tags': 'list[str]',
        'connections': 'dict(str, str)',
        'parameters': 'dict(str, str)',
        'resources': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'environment_id': 'environmentId',
        'workspace_id': 'workspaceId',
        'artifact': 'artifact',
        'tags': 'tags',
        'connections': 'connections',
        'parameters': 'parameters',
        'resources': 'resources'
    }

    def __init__(self, name=None, description=None, environment_id=None, workspace_id=None, artifact=None, tags=None, connections=None, parameters=None, resources=None):  # noqa: E501
        """TaskRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._environment_id = None
        self._workspace_id = None
        self._artifact = None
        self._tags = None
        self._connections = None
        self._parameters = None
        self._resources = None
        self.discriminator = None

        self.name = name
        self.description = description
        self.environment_id = environment_id
        self.workspace_id = workspace_id
        self.artifact = artifact
        if tags is not None:
            self.tags = tags
        if connections is not None:
            self.connections = connections
        if parameters is not None:
            self.parameters = parameters
        if resources is not None:
            self.resources = resources

    @property
    def name(self):
        """Gets the name of this TaskRequest.  # noqa: E501

        Task name  # noqa: E501

        :return: The name of this TaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskRequest.

        Task name  # noqa: E501

        :param name: The name of this TaskRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TaskRequest.  # noqa: E501

        Task description  # noqa: E501

        :return: The description of this TaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskRequest.

        Task description  # noqa: E501

        :param description: The description of this TaskRequest.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def environment_id(self):
        """Gets the environment_id of this TaskRequest.  # noqa: E501

        Environment id of task to create  # noqa: E501

        :return: The environment_id of this TaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this TaskRequest.

        Environment id of task to create  # noqa: E501

        :param environment_id: The environment_id of this TaskRequest.  # noqa: E501
        :type: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")  # noqa: E501

        self._environment_id = environment_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this TaskRequest.  # noqa: E501

        Workspace id of task to create  # noqa: E501

        :return: The workspace_id of this TaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this TaskRequest.

        Workspace id of task to create  # noqa: E501

        :param workspace_id: The workspace_id of this TaskRequest.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def artifact(self):
        """Gets the artifact of this TaskRequest.  # noqa: E501

        Artifact used in task  # noqa: E501

        :return: The artifact of this TaskRequest.  # noqa: E501
        :rtype: ArtifactRequest
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this TaskRequest.

        Artifact used in task  # noqa: E501

        :param artifact: The artifact of this TaskRequest.  # noqa: E501
        :type: ArtifactRequest
        """
        if artifact is None:
            raise ValueError("Invalid value for `artifact`, must not be `None`")  # noqa: E501

        self._artifact = artifact

    @property
    def tags(self):
        """Gets the tags of this TaskRequest.  # noqa: E501

        Task tags  # noqa: E501

        :return: The tags of this TaskRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TaskRequest.

        Task tags  # noqa: E501

        :param tags: The tags of this TaskRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def connections(self):
        """Gets the connections of this TaskRequest.  # noqa: E501

        Task connections  # noqa: E501

        :return: The connections of this TaskRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this TaskRequest.

        Task connections  # noqa: E501

        :param connections: The connections of this TaskRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._connections = connections

    @property
    def parameters(self):
        """Gets the parameters of this TaskRequest.  # noqa: E501

        Task parameters  # noqa: E501

        :return: The parameters of this TaskRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TaskRequest.

        Task parameters  # noqa: E501

        :param parameters: The parameters of this TaskRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def resources(self):
        """Gets the resources of this TaskRequest.  # noqa: E501

        Task resources  # noqa: E501

        :return: The resources of this TaskRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this TaskRequest.

        Task resources  # noqa: E501

        :param resources: The resources of this TaskRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
