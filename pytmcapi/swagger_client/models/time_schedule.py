# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TimeSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'times': 'list[str]',
        'time': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'interval': 'int'
    }

    attribute_map = {
        'type': 'type',
        'times': 'times',
        'time': 'time',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'interval': 'interval'
    }

    def __init__(self, type=None, times=None, time=None, start_time=None, end_time=None, interval=None):  # noqa: E501
        """TimeSchedule - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._times = None
        self._time = None
        self._start_time = None
        self._end_time = None
        self._interval = None
        self.discriminator = None

        self.type = type
        if times is not None:
            self.times = times
        if time is not None:
            self.time = time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if interval is not None:
            self.interval = interval

    @property
    def type(self):
        """Gets the type of this TimeSchedule.  # noqa: E501

        Type of schedule at times  # noqa: E501

        :return: The type of this TimeSchedule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeSchedule.

        Type of schedule at times  # noqa: E501

        :param type: The type of this TimeSchedule.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["AT_TIME", "AT_SPECIFIC_TIMES", "AT_INTERVALS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def times(self):
        """Gets the times of this TimeSchedule.  # noqa: E501

        Timestamps to run task/plan, required only if type of schedule at times equal to AT_SPECIFIC_TIMES  # noqa: E501

        :return: The times of this TimeSchedule.  # noqa: E501
        :rtype: list[str]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this TimeSchedule.

        Timestamps to run task/plan, required only if type of schedule at times equal to AT_SPECIFIC_TIMES  # noqa: E501

        :param times: The times of this TimeSchedule.  # noqa: E501
        :type: list[str]
        """

        self._times = times

    @property
    def time(self):
        """Gets the time of this TimeSchedule.  # noqa: E501

        Timestamp to run task/plan, required only if type of schedule at times equal to AT_TIME  # noqa: E501

        :return: The time of this TimeSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TimeSchedule.

        Timestamp to run task/plan, required only if type of schedule at times equal to AT_TIME  # noqa: E501

        :param time: The time of this TimeSchedule.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def start_time(self):
        """Gets the start_time of this TimeSchedule.  # noqa: E501

        Interval start timestamp, required only if type of schedule at times equal to AT_INTERVALS  # noqa: E501

        :return: The start_time of this TimeSchedule.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TimeSchedule.

        Interval start timestamp, required only if type of schedule at times equal to AT_INTERVALS  # noqa: E501

        :param start_time: The start_time of this TimeSchedule.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TimeSchedule.  # noqa: E501

        Interval end timestamp, required only if type of schedule at times equal to AT_INTERVALS  # noqa: E501

        :return: The end_time of this TimeSchedule.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TimeSchedule.

        Interval end timestamp, required only if type of schedule at times equal to AT_INTERVALS  # noqa: E501

        :param end_time: The end_time of this TimeSchedule.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def interval(self):
        """Gets the interval of this TimeSchedule.  # noqa: E501

        Duration of interval in minutes, required only if type of schedule at times equal to AT_INTERVALS  # noqa: E501

        :return: The interval of this TimeSchedule.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this TimeSchedule.

        Duration of interval in minutes, required only if type of schedule at times equal to AT_INTERVALS  # noqa: E501

        :param interval: The interval of this TimeSchedule.  # noqa: E501
        :type: int
        """

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
