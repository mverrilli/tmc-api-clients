# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlanExecutionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_id': 'str',
        'start_timestamp': 'datetime',
        'finish_timestamp': 'datetime',
        'user_id': 'str',
        'plan_id': 'str',
        'execution_status': 'str',
        'planned_executable_count': 'int',
        'done_executable_count': 'int',
        'done_executable_details': 'list[JobExecutionStatus]'
    }

    attribute_map = {
        'execution_id': 'executionId',
        'start_timestamp': 'startTimestamp',
        'finish_timestamp': 'finishTimestamp',
        'user_id': 'userId',
        'plan_id': 'planId',
        'execution_status': 'executionStatus',
        'planned_executable_count': 'plannedExecutableCount',
        'done_executable_count': 'doneExecutableCount',
        'done_executable_details': 'doneExecutableDetails'
    }

    def __init__(self, execution_id=None, start_timestamp=None, finish_timestamp=None, user_id=None, plan_id=None, execution_status=None, planned_executable_count=None, done_executable_count=None, done_executable_details=None):  # noqa: E501
        """PlanExecutionStatus - a model defined in Swagger"""  # noqa: E501

        self._execution_id = None
        self._start_timestamp = None
        self._finish_timestamp = None
        self._user_id = None
        self._plan_id = None
        self._execution_status = None
        self._planned_executable_count = None
        self._done_executable_count = None
        self._done_executable_details = None
        self.discriminator = None

        self.execution_id = execution_id
        self.start_timestamp = start_timestamp
        if finish_timestamp is not None:
            self.finish_timestamp = finish_timestamp
        self.user_id = user_id
        self.plan_id = plan_id
        self.execution_status = execution_status
        if planned_executable_count is not None:
            self.planned_executable_count = planned_executable_count
        if done_executable_count is not None:
            self.done_executable_count = done_executable_count
        if done_executable_details is not None:
            self.done_executable_details = done_executable_details

    @property
    def execution_id(self):
        """Gets the execution_id of this PlanExecutionStatus.  # noqa: E501

        Job execution ID  # noqa: E501

        :return: The execution_id of this PlanExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this PlanExecutionStatus.

        Job execution ID  # noqa: E501

        :param execution_id: The execution_id of this PlanExecutionStatus.  # noqa: E501
        :type: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")  # noqa: E501

        self._execution_id = execution_id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this PlanExecutionStatus.  # noqa: E501

        Start time of job execution  # noqa: E501

        :return: The start_timestamp of this PlanExecutionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this PlanExecutionStatus.

        Start time of job execution  # noqa: E501

        :param start_timestamp: The start_timestamp of this PlanExecutionStatus.  # noqa: E501
        :type: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")  # noqa: E501

        self._start_timestamp = start_timestamp

    @property
    def finish_timestamp(self):
        """Gets the finish_timestamp of this PlanExecutionStatus.  # noqa: E501

        End time of job execution  # noqa: E501

        :return: The finish_timestamp of this PlanExecutionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_timestamp

    @finish_timestamp.setter
    def finish_timestamp(self, finish_timestamp):
        """Sets the finish_timestamp of this PlanExecutionStatus.

        End time of job execution  # noqa: E501

        :param finish_timestamp: The finish_timestamp of this PlanExecutionStatus.  # noqa: E501
        :type: datetime
        """

        self._finish_timestamp = finish_timestamp

    @property
    def user_id(self):
        """Gets the user_id of this PlanExecutionStatus.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this PlanExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlanExecutionStatus.

        User ID  # noqa: E501

        :param user_id: The user_id of this PlanExecutionStatus.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanExecutionStatus.  # noqa: E501

        Plan ID  # noqa: E501

        :return: The plan_id of this PlanExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanExecutionStatus.

        Plan ID  # noqa: E501

        :param plan_id: The plan_id of this PlanExecutionStatus.  # noqa: E501
        :type: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def execution_status(self):
        """Gets the execution_status of this PlanExecutionStatus.  # noqa: E501

        Execution status  # noqa: E501

        :return: The execution_status of this PlanExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this PlanExecutionStatus.

        Execution status  # noqa: E501

        :param execution_status: The execution_status of this PlanExecutionStatus.  # noqa: E501
        :type: str
        """
        if execution_status is None:
            raise ValueError("Invalid value for `execution_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNDEFINED", "STARTED", "FINISHED", "EXECUTION_FAILED", "EXECUTION_SUCCESS"]  # noqa: E501
        if execution_status not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_status` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_status, allowed_values)
            )

        self._execution_status = execution_status

    @property
    def planned_executable_count(self):
        """Gets the planned_executable_count of this PlanExecutionStatus.  # noqa: E501

        Number of planned executables  # noqa: E501

        :return: The planned_executable_count of this PlanExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._planned_executable_count

    @planned_executable_count.setter
    def planned_executable_count(self, planned_executable_count):
        """Sets the planned_executable_count of this PlanExecutionStatus.

        Number of planned executables  # noqa: E501

        :param planned_executable_count: The planned_executable_count of this PlanExecutionStatus.  # noqa: E501
        :type: int
        """

        self._planned_executable_count = planned_executable_count

    @property
    def done_executable_count(self):
        """Gets the done_executable_count of this PlanExecutionStatus.  # noqa: E501

        Number of done executables  # noqa: E501

        :return: The done_executable_count of this PlanExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._done_executable_count

    @done_executable_count.setter
    def done_executable_count(self, done_executable_count):
        """Sets the done_executable_count of this PlanExecutionStatus.

        Number of done executables  # noqa: E501

        :param done_executable_count: The done_executable_count of this PlanExecutionStatus.  # noqa: E501
        :type: int
        """

        self._done_executable_count = done_executable_count

    @property
    def done_executable_details(self):
        """Gets the done_executable_details of this PlanExecutionStatus.  # noqa: E501

        Exection activity info  # noqa: E501

        :return: The done_executable_details of this PlanExecutionStatus.  # noqa: E501
        :rtype: list[JobExecutionStatus]
        """
        return self._done_executable_details

    @done_executable_details.setter
    def done_executable_details(self, done_executable_details):
        """Sets the done_executable_details of this PlanExecutionStatus.

        Exection activity info  # noqa: E501

        :param done_executable_details: The done_executable_details of this PlanExecutionStatus.  # noqa: E501
        :type: list[JobExecutionStatus]
        """

        self._done_executable_details = done_executable_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanExecutionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanExecutionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
