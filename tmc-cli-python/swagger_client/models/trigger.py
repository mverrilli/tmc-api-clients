# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Trigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'interval': 'int',
        'start_date': 'str',
        'time_zone': 'str',
        'at_times': 'TimeSchedule',
        'at_days': 'DaySchedule',
        'webhook': 'Webhook'
    }

    attribute_map = {
        'type': 'type',
        'interval': 'interval',
        'start_date': 'startDate',
        'time_zone': 'timeZone',
        'at_times': 'atTimes',
        'at_days': 'atDays',
        'webhook': 'webhook'
    }

    def __init__(self, type=None, interval=None, start_date=None, time_zone=None, at_times=None, at_days=None, webhook=None):  # noqa: E501
        """Trigger - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._interval = None
        self._start_date = None
        self._time_zone = None
        self._at_times = None
        self._at_days = None
        self._webhook = None
        self.discriminator = None

        self.type = type
        if interval is not None:
            self.interval = interval
        self.start_date = start_date
        self.time_zone = time_zone
        if at_times is not None:
            self.at_times = at_times
        if at_days is not None:
            self.at_days = at_days
        if webhook is not None:
            self.webhook = webhook

    @property
    def type(self):
        """Gets the type of this Trigger.  # noqa: E501

        Type of schedule  # noqa: E501

        :return: The type of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Trigger.

        Type of schedule  # noqa: E501

        :param type: The type of this Trigger.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ONCE", "DAILY", "WEEKLY", "MONTHLY", "WEBHOOK", "MANUAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def interval(self):
        """Gets the interval of this Trigger.  # noqa: E501

        Interval between task/plan running in days/weeks/months, required only if type of schedule is not equal to 'ONCE')  # noqa: E501

        :return: The interval of this Trigger.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Trigger.

        Interval between task/plan running in days/weeks/months, required only if type of schedule is not equal to 'ONCE')  # noqa: E501

        :param interval: The interval of this Trigger.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def start_date(self):
        """Gets the start_date of this Trigger.  # noqa: E501

        Date when the task should start to run  # noqa: E501

        :return: The start_date of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Trigger.

        Date when the task should start to run  # noqa: E501

        :param start_date: The start_date of this Trigger.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def time_zone(self):
        """Gets the time_zone of this Trigger.  # noqa: E501

        Time zone for task schedule  # noqa: E501

        :return: The time_zone of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Trigger.

        Time zone for task schedule  # noqa: E501

        :param time_zone: The time_zone of this Trigger.  # noqa: E501
        :type: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")  # noqa: E501

        self._time_zone = time_zone

    @property
    def at_times(self):
        """Gets the at_times of this Trigger.  # noqa: E501


        :return: The at_times of this Trigger.  # noqa: E501
        :rtype: TimeSchedule
        """
        return self._at_times

    @at_times.setter
    def at_times(self, at_times):
        """Sets the at_times of this Trigger.


        :param at_times: The at_times of this Trigger.  # noqa: E501
        :type: TimeSchedule
        """

        self._at_times = at_times

    @property
    def at_days(self):
        """Gets the at_days of this Trigger.  # noqa: E501


        :return: The at_days of this Trigger.  # noqa: E501
        :rtype: DaySchedule
        """
        return self._at_days

    @at_days.setter
    def at_days(self, at_days):
        """Sets the at_days of this Trigger.


        :param at_days: The at_days of this Trigger.  # noqa: E501
        :type: DaySchedule
        """

        self._at_days = at_days

    @property
    def webhook(self):
        """Gets the webhook of this Trigger.  # noqa: E501


        :return: The webhook of this Trigger.  # noqa: E501
        :rtype: Webhook
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this Trigger.


        :param webhook: The webhook of this Trigger.  # noqa: E501
        :type: Webhook
        """

        self._webhook = webhook

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
