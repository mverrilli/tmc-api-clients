# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobExecutionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_id': 'str',
        'start_timestamp': 'datetime',
        'finish_timestamp': 'datetime',
        'user_id': 'str',
        'job_id': 'str',
        'job_version': 'str',
        'environment_version': 'str',
        'execution_status': 'str',
        'execution_type': 'str',
        'execution_destination': 'str',
        'container_id': 'str',
        'run_profile_id': 'str',
        'remote_engine_id': 'str',
        'remote_engine_cluster_id': 'str',
        'number_of_processed_rows': 'int',
        'number_of_rejected_rows': 'int',
        'account_id': 'str',
        'workspace_id': 'str',
        'plan_id': 'str',
        'error_type': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'execution_id': 'executionId',
        'start_timestamp': 'startTimestamp',
        'finish_timestamp': 'finishTimestamp',
        'user_id': 'userId',
        'job_id': 'jobId',
        'job_version': 'jobVersion',
        'environment_version': 'environmentVersion',
        'execution_status': 'executionStatus',
        'execution_type': 'executionType',
        'execution_destination': 'executionDestination',
        'container_id': 'containerId',
        'run_profile_id': 'runProfileId',
        'remote_engine_id': 'remoteEngineId',
        'remote_engine_cluster_id': 'remoteEngineClusterId',
        'number_of_processed_rows': 'numberOfProcessedRows',
        'number_of_rejected_rows': 'numberOfRejectedRows',
        'account_id': 'accountId',
        'workspace_id': 'workspaceId',
        'plan_id': 'planId',
        'error_type': 'errorType',
        'error_message': 'errorMessage'
    }

    def __init__(self, execution_id=None, start_timestamp=None, finish_timestamp=None, user_id=None, job_id=None, job_version=None, environment_version=None, execution_status=None, execution_type=None, execution_destination=None, container_id=None, run_profile_id=None, remote_engine_id=None, remote_engine_cluster_id=None, number_of_processed_rows=None, number_of_rejected_rows=None, account_id=None, workspace_id=None, plan_id=None, error_type=None, error_message=None):  # noqa: E501
        """JobExecutionStatus - a model defined in Swagger"""  # noqa: E501

        self._execution_id = None
        self._start_timestamp = None
        self._finish_timestamp = None
        self._user_id = None
        self._job_id = None
        self._job_version = None
        self._environment_version = None
        self._execution_status = None
        self._execution_type = None
        self._execution_destination = None
        self._container_id = None
        self._run_profile_id = None
        self._remote_engine_id = None
        self._remote_engine_cluster_id = None
        self._number_of_processed_rows = None
        self._number_of_rejected_rows = None
        self._account_id = None
        self._workspace_id = None
        self._plan_id = None
        self._error_type = None
        self._error_message = None
        self.discriminator = None

        self.execution_id = execution_id
        self.start_timestamp = start_timestamp
        if finish_timestamp is not None:
            self.finish_timestamp = finish_timestamp
        self.user_id = user_id
        self.job_id = job_id
        self.job_version = job_version
        self.environment_version = environment_version
        self.execution_status = execution_status
        self.execution_type = execution_type
        self.execution_destination = execution_destination
        if container_id is not None:
            self.container_id = container_id
        if run_profile_id is not None:
            self.run_profile_id = run_profile_id
        if remote_engine_id is not None:
            self.remote_engine_id = remote_engine_id
        if remote_engine_cluster_id is not None:
            self.remote_engine_cluster_id = remote_engine_cluster_id
        if number_of_processed_rows is not None:
            self.number_of_processed_rows = number_of_processed_rows
        if number_of_rejected_rows is not None:
            self.number_of_rejected_rows = number_of_rejected_rows
        self.account_id = account_id
        self.workspace_id = workspace_id
        if plan_id is not None:
            self.plan_id = plan_id
        if error_type is not None:
            self.error_type = error_type
        if error_message is not None:
            self.error_message = error_message

    @property
    def execution_id(self):
        """Gets the execution_id of this JobExecutionStatus.  # noqa: E501

        Job execution ID  # noqa: E501

        :return: The execution_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this JobExecutionStatus.

        Job execution ID  # noqa: E501

        :param execution_id: The execution_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")  # noqa: E501

        self._execution_id = execution_id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this JobExecutionStatus.  # noqa: E501

        Start time of job execution  # noqa: E501

        :return: The start_timestamp of this JobExecutionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this JobExecutionStatus.

        Start time of job execution  # noqa: E501

        :param start_timestamp: The start_timestamp of this JobExecutionStatus.  # noqa: E501
        :type: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")  # noqa: E501

        self._start_timestamp = start_timestamp

    @property
    def finish_timestamp(self):
        """Gets the finish_timestamp of this JobExecutionStatus.  # noqa: E501

        End time of job execution  # noqa: E501

        :return: The finish_timestamp of this JobExecutionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_timestamp

    @finish_timestamp.setter
    def finish_timestamp(self, finish_timestamp):
        """Sets the finish_timestamp of this JobExecutionStatus.

        End time of job execution  # noqa: E501

        :param finish_timestamp: The finish_timestamp of this JobExecutionStatus.  # noqa: E501
        :type: datetime
        """

        self._finish_timestamp = finish_timestamp

    @property
    def user_id(self):
        """Gets the user_id of this JobExecutionStatus.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JobExecutionStatus.

        User ID  # noqa: E501

        :param user_id: The user_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def job_id(self):
        """Gets the job_id of this JobExecutionStatus.  # noqa: E501

        Job ID  # noqa: E501

        :return: The job_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobExecutionStatus.

        Job ID  # noqa: E501

        :param job_id: The job_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def job_version(self):
        """Gets the job_version of this JobExecutionStatus.  # noqa: E501

        Job version  # noqa: E501

        :return: The job_version of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_version

    @job_version.setter
    def job_version(self, job_version):
        """Sets the job_version of this JobExecutionStatus.

        Job version  # noqa: E501

        :param job_version: The job_version of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if job_version is None:
            raise ValueError("Invalid value for `job_version`, must not be `None`")  # noqa: E501

        self._job_version = job_version

    @property
    def environment_version(self):
        """Gets the environment_version of this JobExecutionStatus.  # noqa: E501

        Execution environment version  # noqa: E501

        :return: The environment_version of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._environment_version

    @environment_version.setter
    def environment_version(self, environment_version):
        """Sets the environment_version of this JobExecutionStatus.

        Execution environment version  # noqa: E501

        :param environment_version: The environment_version of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if environment_version is None:
            raise ValueError("Invalid value for `environment_version`, must not be `None`")  # noqa: E501
        allowed_values = ["1.2", "1.3"]  # noqa: E501
        if environment_version not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_version` ({0}), must be one of {1}"  # noqa: E501
                .format(environment_version, allowed_values)
            )

        self._environment_version = environment_version

    @property
    def execution_status(self):
        """Gets the execution_status of this JobExecutionStatus.  # noqa: E501

        Execution status  # noqa: E501

        :return: The execution_status of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this JobExecutionStatus.

        Execution status  # noqa: E501

        :param execution_status: The execution_status of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if execution_status is None:
            raise ValueError("Invalid value for `execution_status`, must not be `None`")  # noqa: E501
        allowed_values = ["EXECUTION_EVENT_RECEIVED", "DISPATCHING_FLOW", "STARTING_FLOW_EXECUTION", "EXECUTION_TERMINATED", "DEPLOY_FAILED", "EXECUTION_FAILED", "EXECUTION_SUCCESS"]  # noqa: E501
        if execution_status not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_status` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_status, allowed_values)
            )

        self._execution_status = execution_status

    @property
    def execution_type(self):
        """Gets the execution_type of this JobExecutionStatus.  # noqa: E501

        Execution type  # noqa: E501

        :return: The execution_type of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_type

    @execution_type.setter
    def execution_type(self, execution_type):
        """Sets the execution_type of this JobExecutionStatus.

        Execution type  # noqa: E501

        :param execution_type: The execution_type of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if execution_type is None:
            raise ValueError("Invalid value for `execution_type`, must not be `None`")  # noqa: E501
        allowed_values = ["MANUAL", "SCHEDULED", "WEBHOOK", "PLAN"]  # noqa: E501
        if execution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_type` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_type, allowed_values)
            )

        self._execution_type = execution_type

    @property
    def execution_destination(self):
        """Gets the execution_destination of this JobExecutionStatus.  # noqa: E501

        Destination of execution  # noqa: E501

        :return: The execution_destination of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_destination

    @execution_destination.setter
    def execution_destination(self, execution_destination):
        """Sets the execution_destination of this JobExecutionStatus.

        Destination of execution  # noqa: E501

        :param execution_destination: The execution_destination of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if execution_destination is None:
            raise ValueError("Invalid value for `execution_destination`, must not be `None`")  # noqa: E501
        allowed_values = ["CLOUD", "CLOUD_EXCLUSIVE", "CLOUD_SANDBOX", "REMOTE_ENGINE", "REMOTE_ENGINE_CLUSTER"]  # noqa: E501
        if execution_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_destination, allowed_values)
            )

        self._execution_destination = execution_destination

    @property
    def container_id(self):
        """Gets the container_id of this JobExecutionStatus.  # noqa: E501

        Container ID  # noqa: E501

        :return: The container_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this JobExecutionStatus.

        Container ID  # noqa: E501

        :param container_id: The container_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def run_profile_id(self):
        """Gets the run_profile_id of this JobExecutionStatus.  # noqa: E501

        Run profile ID  # noqa: E501

        :return: The run_profile_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._run_profile_id

    @run_profile_id.setter
    def run_profile_id(self, run_profile_id):
        """Sets the run_profile_id of this JobExecutionStatus.

        Run profile ID  # noqa: E501

        :param run_profile_id: The run_profile_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._run_profile_id = run_profile_id

    @property
    def remote_engine_id(self):
        """Gets the remote_engine_id of this JobExecutionStatus.  # noqa: E501

        Remote engine ID  # noqa: E501

        :return: The remote_engine_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._remote_engine_id

    @remote_engine_id.setter
    def remote_engine_id(self, remote_engine_id):
        """Sets the remote_engine_id of this JobExecutionStatus.

        Remote engine ID  # noqa: E501

        :param remote_engine_id: The remote_engine_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._remote_engine_id = remote_engine_id

    @property
    def remote_engine_cluster_id(self):
        """Gets the remote_engine_cluster_id of this JobExecutionStatus.  # noqa: E501

        Remote engine cluster ID  # noqa: E501

        :return: The remote_engine_cluster_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._remote_engine_cluster_id

    @remote_engine_cluster_id.setter
    def remote_engine_cluster_id(self, remote_engine_cluster_id):
        """Sets the remote_engine_cluster_id of this JobExecutionStatus.

        Remote engine cluster ID  # noqa: E501

        :param remote_engine_cluster_id: The remote_engine_cluster_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._remote_engine_cluster_id = remote_engine_cluster_id

    @property
    def number_of_processed_rows(self):
        """Gets the number_of_processed_rows of this JobExecutionStatus.  # noqa: E501

        Number of processed rows  # noqa: E501

        :return: The number_of_processed_rows of this JobExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._number_of_processed_rows

    @number_of_processed_rows.setter
    def number_of_processed_rows(self, number_of_processed_rows):
        """Sets the number_of_processed_rows of this JobExecutionStatus.

        Number of processed rows  # noqa: E501

        :param number_of_processed_rows: The number_of_processed_rows of this JobExecutionStatus.  # noqa: E501
        :type: int
        """

        self._number_of_processed_rows = number_of_processed_rows

    @property
    def number_of_rejected_rows(self):
        """Gets the number_of_rejected_rows of this JobExecutionStatus.  # noqa: E501

        Number of rejected rows  # noqa: E501

        :return: The number_of_rejected_rows of this JobExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._number_of_rejected_rows

    @number_of_rejected_rows.setter
    def number_of_rejected_rows(self, number_of_rejected_rows):
        """Sets the number_of_rejected_rows of this JobExecutionStatus.

        Number of rejected rows  # noqa: E501

        :param number_of_rejected_rows: The number_of_rejected_rows of this JobExecutionStatus.  # noqa: E501
        :type: int
        """

        self._number_of_rejected_rows = number_of_rejected_rows

    @property
    def account_id(self):
        """Gets the account_id of this JobExecutionStatus.  # noqa: E501

        Account ID  # noqa: E501

        :return: The account_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this JobExecutionStatus.

        Account ID  # noqa: E501

        :param account_id: The account_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this JobExecutionStatus.  # noqa: E501

        Workspace ID  # noqa: E501

        :return: The workspace_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this JobExecutionStatus.

        Workspace ID  # noqa: E501

        :param workspace_id: The workspace_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def plan_id(self):
        """Gets the plan_id of this JobExecutionStatus.  # noqa: E501

        Plan execution ID  # noqa: E501

        :return: The plan_id of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this JobExecutionStatus.

        Plan execution ID  # noqa: E501

        :param plan_id: The plan_id of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._plan_id = plan_id

    @property
    def error_type(self):
        """Gets the error_type of this JobExecutionStatus.  # noqa: E501

        Error type if error occurs  # noqa: E501

        :return: The error_type of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this JobExecutionStatus.

        Error type if error occurs  # noqa: E501

        :param error_type: The error_type of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def error_message(self):
        """Gets the error_message of this JobExecutionStatus.  # noqa: E501

        Error message if error occurs  # noqa: E501

        :return: The error_message of this JobExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this JobExecutionStatus.

        Error message if error occurs  # noqa: E501

        :param error_message: The error_message of this JobExecutionStatus.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobExecutionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobExecutionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
