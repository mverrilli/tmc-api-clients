# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PromotionArtifactExecutionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'target_id': 'str',
        'name': 'str',
        'type': 'str',
        'analyze_report': 'Report',
        'promotion_report': 'Report',
        'used_by': 'list[PromotionExecutionInfo]'
    }

    attribute_map = {
        'id': 'id',
        'target_id': 'targetId',
        'name': 'name',
        'type': 'type',
        'analyze_report': 'analyzeReport',
        'promotion_report': 'promotionReport',
        'used_by': 'usedBy'
    }

    def __init__(self, id=None, target_id=None, name=None, type=None, analyze_report=None, promotion_report=None, used_by=None):  # noqa: E501
        """PromotionArtifactExecutionInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._target_id = None
        self._name = None
        self._type = None
        self._analyze_report = None
        self._promotion_report = None
        self._used_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if target_id is not None:
            self.target_id = target_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if analyze_report is not None:
            self.analyze_report = analyze_report
        if promotion_report is not None:
            self.promotion_report = promotion_report
        if used_by is not None:
            self.used_by = used_by

    @property
    def id(self):
        """Gets the id of this PromotionArtifactExecutionInfo.  # noqa: E501

        Artifact Id  # noqa: E501

        :return: The id of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromotionArtifactExecutionInfo.

        Artifact Id  # noqa: E501

        :param id: The id of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def target_id(self):
        """Gets the target_id of this PromotionArtifactExecutionInfo.  # noqa: E501

        Target Artifact Id  # noqa: E501

        :return: The target_id of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this PromotionArtifactExecutionInfo.

        Target Artifact Id  # noqa: E501

        :param target_id: The target_id of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def name(self):
        """Gets the name of this PromotionArtifactExecutionInfo.  # noqa: E501

        Artifact Name  # noqa: E501

        :return: The name of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromotionArtifactExecutionInfo.

        Artifact Name  # noqa: E501

        :param name: The name of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PromotionArtifactExecutionInfo.  # noqa: E501

        Artifact Type  # noqa: E501

        :return: The type of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PromotionArtifactExecutionInfo.

        Artifact Type  # noqa: E501

        :param type: The type of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["WORKSPACE", "PLAN", "FLOW", "ACTION", "CONNECTION", "RESOURCE", "ENGINE", "CLUSTER", "FOLDER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def analyze_report(self):
        """Gets the analyze_report of this PromotionArtifactExecutionInfo.  # noqa: E501

        Promotion Analyze Report  # noqa: E501

        :return: The analyze_report of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: Report
        """
        return self._analyze_report

    @analyze_report.setter
    def analyze_report(self, analyze_report):
        """Sets the analyze_report of this PromotionArtifactExecutionInfo.

        Promotion Analyze Report  # noqa: E501

        :param analyze_report: The analyze_report of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: Report
        """

        self._analyze_report = analyze_report

    @property
    def promotion_report(self):
        """Gets the promotion_report of this PromotionArtifactExecutionInfo.  # noqa: E501

        Promotion Report  # noqa: E501

        :return: The promotion_report of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: Report
        """
        return self._promotion_report

    @promotion_report.setter
    def promotion_report(self, promotion_report):
        """Sets the promotion_report of this PromotionArtifactExecutionInfo.

        Promotion Report  # noqa: E501

        :param promotion_report: The promotion_report of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: Report
        """

        self._promotion_report = promotion_report

    @property
    def used_by(self):
        """Gets the used_by of this PromotionArtifactExecutionInfo.  # noqa: E501

        used by Artifacts  # noqa: E501

        :return: The used_by of this PromotionArtifactExecutionInfo.  # noqa: E501
        :rtype: list[PromotionExecutionInfo]
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this PromotionArtifactExecutionInfo.

        used by Artifacts  # noqa: E501

        :param used_by: The used_by of this PromotionArtifactExecutionInfo.  # noqa: E501
        :type: list[PromotionExecutionInfo]
        """

        self._used_by = used_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionArtifactExecutionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionArtifactExecutionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
