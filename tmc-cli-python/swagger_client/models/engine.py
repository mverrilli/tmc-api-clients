# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Engine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'workspace': 'WorkspaceInfo',
        'create_date': 'datetime',
        'update_date': 'datetime',
        'runtime_id': 'str',
        'availability': 'str',
        'environment_id': 'str',
        'workspace_id': 'str',
        'run_profiles': 'list[str]',
        'status': 'str',
        'debug': 'EngineDebug',
        'cluster_id': 'str',
        'pre_authorized_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'workspace': 'workspace',
        'create_date': 'createDate',
        'update_date': 'updateDate',
        'runtime_id': 'runtimeId',
        'availability': 'availability',
        'environment_id': 'environmentId',
        'workspace_id': 'workspaceId',
        'run_profiles': 'runProfiles',
        'status': 'status',
        'debug': 'debug',
        'cluster_id': 'clusterId',
        'pre_authorized_key': 'preAuthorizedKey'
    }

    def __init__(self, id=None, name=None, description=None, workspace=None, create_date=None, update_date=None, runtime_id=None, availability=None, environment_id=None, workspace_id=None, run_profiles=None, status=None, debug=None, cluster_id=None, pre_authorized_key=None):  # noqa: E501
        """Engine - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._workspace = None
        self._create_date = None
        self._update_date = None
        self._runtime_id = None
        self._availability = None
        self._environment_id = None
        self._workspace_id = None
        self._run_profiles = None
        self._status = None
        self._debug = None
        self._cluster_id = None
        self._pre_authorized_key = None
        self.discriminator = None

        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if workspace is not None:
            self.workspace = workspace
        self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date
        self.runtime_id = runtime_id
        if availability is not None:
            self.availability = availability
        self.environment_id = environment_id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        self.run_profiles = run_profiles
        self.status = status
        if debug is not None:
            self.debug = debug
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if pre_authorized_key is not None:
            self.pre_authorized_key = pre_authorized_key

    @property
    def id(self):
        """Gets the id of this Engine.  # noqa: E501

        Resource id  # noqa: E501

        :return: The id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Engine.

        Resource id  # noqa: E501

        :param id: The id of this Engine.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Engine.  # noqa: E501

        Resource name  # noqa: E501

        :return: The name of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Engine.

        Resource name  # noqa: E501

        :param name: The name of this Engine.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Engine.  # noqa: E501

        Resource description  # noqa: E501

        :return: The description of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Engine.

        Resource description  # noqa: E501

        :param description: The description of this Engine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workspace(self):
        """Gets the workspace of this Engine.  # noqa: E501

        Resource workspace  # noqa: E501

        :return: The workspace of this Engine.  # noqa: E501
        :rtype: WorkspaceInfo
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this Engine.

        Resource workspace  # noqa: E501

        :param workspace: The workspace of this Engine.  # noqa: E501
        :type: WorkspaceInfo
        """

        self._workspace = workspace

    @property
    def create_date(self):
        """Gets the create_date of this Engine.  # noqa: E501

        Date of creation of the resource  # noqa: E501

        :return: The create_date of this Engine.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Engine.

        Date of creation of the resource  # noqa: E501

        :param create_date: The create_date of this Engine.  # noqa: E501
        :type: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this Engine.  # noqa: E501

        Date of updating of the resource  # noqa: E501

        :return: The update_date of this Engine.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Engine.

        Date of updating of the resource  # noqa: E501

        :param update_date: The update_date of this Engine.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def runtime_id(self):
        """Gets the runtime_id of this Engine.  # noqa: E501

        Resource runtime id  # noqa: E501

        :return: The runtime_id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._runtime_id

    @runtime_id.setter
    def runtime_id(self, runtime_id):
        """Sets the runtime_id of this Engine.

        Resource runtime id  # noqa: E501

        :param runtime_id: The runtime_id of this Engine.  # noqa: E501
        :type: str
        """
        if runtime_id is None:
            raise ValueError("Invalid value for `runtime_id`, must not be `None`")  # noqa: E501

        self._runtime_id = runtime_id

    @property
    def availability(self):
        """Gets the availability of this Engine.  # noqa: E501

        Availability status of engine|cluster  # noqa: E501

        :return: The availability of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Engine.

        Availability status of engine|cluster  # noqa: E501

        :param availability: The availability of this Engine.  # noqa: E501
        :type: str
        """
        allowed_values = ["AVAILABLE", "NOT_AVAILABLE", "RETIRED"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"  # noqa: E501
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def environment_id(self):
        """Gets the environment_id of this Engine.  # noqa: E501

        Id of engine environment  # noqa: E501

        :return: The environment_id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this Engine.

        Id of engine environment  # noqa: E501

        :param environment_id: The environment_id of this Engine.  # noqa: E501
        :type: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")  # noqa: E501

        self._environment_id = environment_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Engine.  # noqa: E501

        Id of engine workspace  # noqa: E501

        :return: The workspace_id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Engine.

        Id of engine workspace  # noqa: E501

        :param workspace_id: The workspace_id of this Engine.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def run_profiles(self):
        """Gets the run_profiles of this Engine.  # noqa: E501

        Run profiles of engine  # noqa: E501

        :return: The run_profiles of this Engine.  # noqa: E501
        :rtype: list[str]
        """
        return self._run_profiles

    @run_profiles.setter
    def run_profiles(self, run_profiles):
        """Sets the run_profiles of this Engine.

        Run profiles of engine  # noqa: E501

        :param run_profiles: The run_profiles of this Engine.  # noqa: E501
        :type: list[str]
        """
        if run_profiles is None:
            raise ValueError("Invalid value for `run_profiles`, must not be `None`")  # noqa: E501

        self._run_profiles = run_profiles

    @property
    def status(self):
        """Gets the status of this Engine.  # noqa: E501

        Engine status  # noqa: E501

        :return: The status of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Engine.

        Engine status  # noqa: E501

        :param status: The status of this Engine.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PAIRED", "NOT_PAIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def debug(self):
        """Gets the debug of this Engine.  # noqa: E501

        Remote Run/Debug configuration  # noqa: E501

        :return: The debug of this Engine.  # noqa: E501
        :rtype: EngineDebug
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this Engine.

        Remote Run/Debug configuration  # noqa: E501

        :param debug: The debug of this Engine.  # noqa: E501
        :type: EngineDebug
        """

        self._debug = debug

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Engine.  # noqa: E501

        cluster that this engine is part of  # noqa: E501

        :return: The cluster_id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Engine.

        cluster that this engine is part of  # noqa: E501

        :param cluster_id: The cluster_id of this Engine.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def pre_authorized_key(self):
        """Gets the pre_authorized_key of this Engine.  # noqa: E501

        Preauthorized key (only for not paired engine)  # noqa: E501

        :return: The pre_authorized_key of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._pre_authorized_key

    @pre_authorized_key.setter
    def pre_authorized_key(self, pre_authorized_key):
        """Sets the pre_authorized_key of this Engine.

        Preauthorized key (only for not paired engine)  # noqa: E501

        :param pre_authorized_key: The pre_authorized_key of this Engine.  # noqa: E501
        :type: str
        """

        self._pre_authorized_key = pre_authorized_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Engine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Engine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
