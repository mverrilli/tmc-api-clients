# coding: utf-8

"""
    Talend Management Console Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PromotionExecutionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_id': 'str',
        'start_timestamp': 'datetime',
        'finish_timestamp': 'datetime',
        'user_id': 'str',
        'promotion_id': 'str',
        'keep_target_resources': 'bool',
        'advanced': 'AdvancedPromotionSpec',
        'defective': 'bool',
        'status': 'str',
        'status_message': 'str',
        'workspaces': 'list[WorkspacePromotionExecutionInfo]',
        'engines': 'list[PromotionArtifactExecutionInfo]',
        'clusters': 'list[PromotionArtifactExecutionInfo]',
        'pipeline_id': 'str'
    }

    attribute_map = {
        'execution_id': 'executionId',
        'start_timestamp': 'startTimestamp',
        'finish_timestamp': 'finishTimestamp',
        'user_id': 'userId',
        'promotion_id': 'promotionId',
        'keep_target_resources': 'keepTargetResources',
        'advanced': 'advanced',
        'defective': 'defective',
        'status': 'status',
        'status_message': 'statusMessage',
        'workspaces': 'workspaces',
        'engines': 'engines',
        'clusters': 'clusters',
        'pipeline_id': 'pipelineId'
    }

    def __init__(self, execution_id=None, start_timestamp=None, finish_timestamp=None, user_id=None, promotion_id=None, keep_target_resources=None, advanced=None, defective=None, status=None, status_message=None, workspaces=None, engines=None, clusters=None, pipeline_id=None):  # noqa: E501
        """PromotionExecutionInfo - a model defined in Swagger"""  # noqa: E501

        self._execution_id = None
        self._start_timestamp = None
        self._finish_timestamp = None
        self._user_id = None
        self._promotion_id = None
        self._keep_target_resources = None
        self._advanced = None
        self._defective = None
        self._status = None
        self._status_message = None
        self._workspaces = None
        self._engines = None
        self._clusters = None
        self._pipeline_id = None
        self.discriminator = None

        self.execution_id = execution_id
        self.start_timestamp = start_timestamp
        if finish_timestamp is not None:
            self.finish_timestamp = finish_timestamp
        self.user_id = user_id
        if promotion_id is not None:
            self.promotion_id = promotion_id
        if keep_target_resources is not None:
            self.keep_target_resources = keep_target_resources
        if advanced is not None:
            self.advanced = advanced
        if defective is not None:
            self.defective = defective
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if workspaces is not None:
            self.workspaces = workspaces
        if engines is not None:
            self.engines = engines
        if clusters is not None:
            self.clusters = clusters
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id

    @property
    def execution_id(self):
        """Gets the execution_id of this PromotionExecutionInfo.  # noqa: E501

        Job execution ID  # noqa: E501

        :return: The execution_id of this PromotionExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this PromotionExecutionInfo.

        Job execution ID  # noqa: E501

        :param execution_id: The execution_id of this PromotionExecutionInfo.  # noqa: E501
        :type: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")  # noqa: E501

        self._execution_id = execution_id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this PromotionExecutionInfo.  # noqa: E501

        Start time of job execution  # noqa: E501

        :return: The start_timestamp of this PromotionExecutionInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this PromotionExecutionInfo.

        Start time of job execution  # noqa: E501

        :param start_timestamp: The start_timestamp of this PromotionExecutionInfo.  # noqa: E501
        :type: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")  # noqa: E501

        self._start_timestamp = start_timestamp

    @property
    def finish_timestamp(self):
        """Gets the finish_timestamp of this PromotionExecutionInfo.  # noqa: E501

        End time of job execution  # noqa: E501

        :return: The finish_timestamp of this PromotionExecutionInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_timestamp

    @finish_timestamp.setter
    def finish_timestamp(self, finish_timestamp):
        """Sets the finish_timestamp of this PromotionExecutionInfo.

        End time of job execution  # noqa: E501

        :param finish_timestamp: The finish_timestamp of this PromotionExecutionInfo.  # noqa: E501
        :type: datetime
        """

        self._finish_timestamp = finish_timestamp

    @property
    def user_id(self):
        """Gets the user_id of this PromotionExecutionInfo.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this PromotionExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PromotionExecutionInfo.

        User ID  # noqa: E501

        :param user_id: The user_id of this PromotionExecutionInfo.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def promotion_id(self):
        """Gets the promotion_id of this PromotionExecutionInfo.  # noqa: E501

        Promotion Id  # noqa: E501

        :return: The promotion_id of this PromotionExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id):
        """Sets the promotion_id of this PromotionExecutionInfo.

        Promotion Id  # noqa: E501

        :param promotion_id: The promotion_id of this PromotionExecutionInfo.  # noqa: E501
        :type: str
        """

        self._promotion_id = promotion_id

    @property
    def keep_target_resources(self):
        """Gets the keep_target_resources of this PromotionExecutionInfo.  # noqa: E501

        keep target resources flag  # noqa: E501

        :return: The keep_target_resources of this PromotionExecutionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._keep_target_resources

    @keep_target_resources.setter
    def keep_target_resources(self, keep_target_resources):
        """Sets the keep_target_resources of this PromotionExecutionInfo.

        keep target resources flag  # noqa: E501

        :param keep_target_resources: The keep_target_resources of this PromotionExecutionInfo.  # noqa: E501
        :type: bool
        """

        self._keep_target_resources = keep_target_resources

    @property
    def advanced(self):
        """Gets the advanced of this PromotionExecutionInfo.  # noqa: E501

        advanced promotion specification  # noqa: E501

        :return: The advanced of this PromotionExecutionInfo.  # noqa: E501
        :rtype: AdvancedPromotionSpec
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this PromotionExecutionInfo.

        advanced promotion specification  # noqa: E501

        :param advanced: The advanced of this PromotionExecutionInfo.  # noqa: E501
        :type: AdvancedPromotionSpec
        """

        self._advanced = advanced

    @property
    def defective(self):
        """Gets the defective of this PromotionExecutionInfo.  # noqa: E501

        defective promotion flag  # noqa: E501

        :return: The defective of this PromotionExecutionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._defective

    @defective.setter
    def defective(self, defective):
        """Sets the defective of this PromotionExecutionInfo.

        defective promotion flag  # noqa: E501

        :param defective: The defective of this PromotionExecutionInfo.  # noqa: E501
        :type: bool
        """

        self._defective = defective

    @property
    def status(self):
        """Gets the status of this PromotionExecutionInfo.  # noqa: E501

        execution status  # noqa: E501

        :return: The status of this PromotionExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PromotionExecutionInfo.

        execution status  # noqa: E501

        :param status: The status of this PromotionExecutionInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANALIZED", "PROMOTION_STARTED", "PROMOTION_WARNING", "PROMOTION_FAILED", "PROMOTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this PromotionExecutionInfo.  # noqa: E501

        Execution status message  # noqa: E501

        :return: The status_message of this PromotionExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this PromotionExecutionInfo.

        Execution status message  # noqa: E501

        :param status_message: The status_message of this PromotionExecutionInfo.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def workspaces(self):
        """Gets the workspaces of this PromotionExecutionInfo.  # noqa: E501

        WorkspacePromotionExecutionInfo  # noqa: E501

        :return: The workspaces of this PromotionExecutionInfo.  # noqa: E501
        :rtype: list[WorkspacePromotionExecutionInfo]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this PromotionExecutionInfo.

        WorkspacePromotionExecutionInfo  # noqa: E501

        :param workspaces: The workspaces of this PromotionExecutionInfo.  # noqa: E501
        :type: list[WorkspacePromotionExecutionInfo]
        """

        self._workspaces = workspaces

    @property
    def engines(self):
        """Gets the engines of this PromotionExecutionInfo.  # noqa: E501

        Remote Engines PromotionExecutionInfo  # noqa: E501

        :return: The engines of this PromotionExecutionInfo.  # noqa: E501
        :rtype: list[PromotionArtifactExecutionInfo]
        """
        return self._engines

    @engines.setter
    def engines(self, engines):
        """Sets the engines of this PromotionExecutionInfo.

        Remote Engines PromotionExecutionInfo  # noqa: E501

        :param engines: The engines of this PromotionExecutionInfo.  # noqa: E501
        :type: list[PromotionArtifactExecutionInfo]
        """

        self._engines = engines

    @property
    def clusters(self):
        """Gets the clusters of this PromotionExecutionInfo.  # noqa: E501

        Remote Engine Clusters PromotionExecutionInfo  # noqa: E501

        :return: The clusters of this PromotionExecutionInfo.  # noqa: E501
        :rtype: list[PromotionArtifactExecutionInfo]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this PromotionExecutionInfo.

        Remote Engine Clusters PromotionExecutionInfo  # noqa: E501

        :param clusters: The clusters of this PromotionExecutionInfo.  # noqa: E501
        :type: list[PromotionArtifactExecutionInfo]
        """

        self._clusters = clusters

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PromotionExecutionInfo.  # noqa: E501

        Deprecated! Use Promotion Id instead  # noqa: E501

        :return: The pipeline_id of this PromotionExecutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PromotionExecutionInfo.

        Deprecated! Use Promotion Id instead  # noqa: E501

        :param pipeline_id: The pipeline_id of this PromotionExecutionInfo.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionExecutionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionExecutionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
